Who Was CNS 531 project progress
6-4: Got clear button working, ugly solution with onCreate but it will work for now 
6-5: Started to set up database, still need to figure out how to pass values from activity 1 to activity 3, unknown error, trace doesn't help. It's probably your terrible sql. Understand what each component does, I think you bit off more than you could chew in this (30 minute) print
6-7: Got dates to display in table. Next up is to get a fuckin formated date to insert.
6-8: Got formatted date to insert. Next is to pass the actual starting date. Which also got done today after a brief i broke something very important scare. Next up is to start adding other columns to table
6-10:Literally nothing depite working. To add columns you will have to make ugly alter table statemeents or find a way to delete the database
6-11:Morning:woke up with a drive to get something done before work. Mission accomplished! In order to get table to work properly, had to execute a drop table and then create table command.. To insert data and find proper column indices I used cursor.getString and cursor.getColumnIndex(string columnName). Data inserts fine now. 
6-11:Evening:INTENTS ARE NEEDED TO PASS DATA- a brutal brutal lesson learned. Dates are now being inserted in the correct format. Hopefully the algorithm work can start tomorrow. 
6-12: Created setStartingLifts function, and added rest of lift edittext fields. Function is tested and works. Error handling for bad (empty) data needs to be done (no bench over 1000, no squat over 1200, no ohp over 1000, no dead over 1200). Created incrementFreq/incrementLift methods. Did not test.
6-12: setter for starting dates does not work, just use intents. 
6-14: tried to fix layout problem (bench number not showing up in edittext), wrestled with it forever and settled with a right alignment with screen. not sure how this will pan out for smaller screens but we'll tackle the probem when it comes. Also did error handling today for the big 4, error stream outputs to dynamic textview. Again, hopefully this will work on smaller screens.
6-15: entries are now inserting with all proper information gathered from dateprocessor.java..minus the date itself. Algorithm could probably use some simplification too. All in good time 
6-15: Dates are finally incrementing correctly. Not even debugging can save you from silly function calls sometimes. Plenty of things to choose from for tomorrow...
6-16: Implemented scrolling when displaying data. Installed on a brand new vm, 3.4in, fits fine minus nonterminating decimals. Shouldn't be too bad to fix:) 
6-17: Fixed nonterminating decimals, now round to two decimal points. Fixed buttons in scrollview. Now move with scrolling :) Key was to put them outside the scrollview, but inside the relativelayout.  Added basics with a spinner and number of cycles to project, error handling and other cutesy stuff. Created temp (perhaps permanent) fix for thirdtoSecond... Made it simply go to first. WIll work for now. 
6-18: Started kg support. Cannot get intents to work properly to pass status of kg/lb, so just using toast. Didn't do error handling 
6-19: morning: Finally got mode flag to work.. Next up is to actually take care of the math. A "hide buttons" toggle would be nice for smaller screens
6-21: Have not got much done, have been busy setting my ubuntu environment. Figure it can't be bad to learn both. Should have Android system images installed tomorrow and should be able to finish up kg support without too much trouble.  
6-22: don't have all compatibility libraries working in ubuntu... regardless working on windows partition I added kg support (which seems to be working) and modified how the mode displays for a better viewing experience regardless of screen size. Added title that displayed what users starting lifts were. Next to do is cleanup... your old records are still there when you reinsert.
6-23: Still didn't do cleanup because that seemed boring and I did boring things at work all day:) Created rounding function, implemented for getFirstLift(), seems to work fine... Will add to other lifts. Tested on a 3.4 screen and it looks pretty slick. Next up is cleanup, a show buttons popup
6-24: Fixed back button logic.. Read console stack trace and fixed things.. Who woulda thunk. Fixed uncleared database bug.. Database should be clear every time now. As a result, removed clear button. Added options menu via a easy plug n play builder :) Surprised how well everything went today.. Next up is  probably option menu button logic  and cleanup of buttons on main layout that no longer need to be there. 
6-25: Added basic support (back buttons) to popup options menu on third screen, deleted old buttons. House cleaning on methods/formatting in attempt for cleaner presentation and hopefully a little faster database insertion algorithm:( Attempting to implement a onRestoreInstanceState method to remember lifts... Got that working pretty easily for the built in android back button. Struggled a bit with my 'adjust lifts' option (essentially a back button) before having the idea to simply call the same method my kindle uses. works great. wooooooo 
6-26: Working on view by views, which will be under an embedded builder after "View By..." button is pushed. Implemented everything  
6-27: Fixed views so they're actually displayed proper way. Recalling oncreate is never a good idea. Used query and only the methods called I needed from onCreate instead of the whole damn thing.. Tried to work on making layout prettier but had some issues with scalability. Function over form right now. Next up is viewing an existing creation.  
6-28: Started to work on view existing projection. training maxes are not currently saved but i am parsing for null and ignoring the ret string if it contains that word and replaces it with a newline. You'll probably want to figure that out.. 
7-01: Figured out how to save TMs for an existing projection... convoluted but works. 
7-02: Added zyzz bird background, training maxes now show when changing "view by...", added zyzz bird icon 
7-04: Created threaded loading screen :) 
7-06: Started to implement individual view UI. Got basic code down. Used lots of copy and paste...
7-07: Still work on individual view UI, made code a little prettier, however, you may want to read up on reflection for grabbing your fields. I'll add a todo.
7-08: started  to link UI with main application.. dynamically created individual text view for each entry, next is to add listeners and make sure I didn't break anything.  
7-09: Continuing to link.. Should be done tomorrow. Fixed odd bug with third lift displaying instead as training max. Mislabeled field in eventssqldatahelper.java 
7-10: Struggled hard with link.. No idea what was wrong with formatting. Workaround is to have bar + plate for each and every lift...
7-11: finished lb UI garbage, created a regex to split entries  
7-12: fixed platecomputer bug.. was comparing to integer string instead of double string -_- Eventually all these dumb errors will be sorted through quicker I hope 
7-14: UI is finally working properly on the individualview... It is a good day 
7-15: Finished up the set of three that will represent a single lift. Next up is to implement down and up swipe (where corner cases are the top and bottom entries in the database)
7-16: finsihed up dynamically created view on up and down swipe, took care of corner cases. Broke some stuff with views, will take care of that tomorrow :) 
7-17: Fixed bug with swiping up and then swiping right, navigation seems to be working proper now. Working on view by bug, will now scroll through no matter what view you're on. Bug now with training max, need to get it from database.
7-18: IndividualView now works for ANY view. Finally finished off training max bug and it was actually mildly elegant. I impress myself sometimes 
7-19: Fixed an overall view bug that saved previous mode when resetting and projecting a different set of lifts. Fixed frequency appender... forgot breaks in my switch statements :) Added proper lb/kg mode flag.. methoding is not working properly quite yet but i'll figure it out. I think it has to do with data being unpassed that's needed when you up and down swipe (ie the fucking mode itself) 
7-20: Fixed back button bug. Added kilogram error handling and slightly more dynamic error handling (actually retrieves erroraneous lift number). Got initial KG placeholders made... Started to tackle kilogram support  
7-21: added extra textviews for kilograms, hid them for lbs. Fixed SQL issue when starting fresh on new device 
7-22: Plugged in entirely new UI for third screen. Now uses dynamically created tablerows and looks oh so much better
7-23: Found a proper display for training maxes and config button
7-24: Finally plugged in logic that will support custom patterns of whatever user wants to do the lifts in. Still need to fix indidivual view scrolling. Currently have default scrolling implemented, but nothing else. Also need to rig up actual pattern chooser so I can really throw some test cases at my algorithms. (mostly my view ones, I'm pretty sure my calculate one is right.) 
7-28: Lost log entries somewhere in a commit. whoops. Continuing to refactor today.
7-28: set up hardware acceleration on linux machine, my life is a million times better now. Except for refactoring. In that sense I'd rather be on fire. Slowly but surely slimming classes down, not going to spend much more time on it.
7-29: slight refactoring and adding in plate booleans to specify what plates one does and doesn't have
 bug/suggestion list


TO DO:.
 
"Export..."  in however many formats you can take  
gradient buttons? - http://www.dibbus.com/2011/02/gradient-buttons-for-android/ 
reflection: http://stackoverflow.com/questions/16353140/android-textview-arrays
create text size based on how big screen is?
clean up your code it's fucking juvenile and ugly 
check your program against the excel sheet you wrote
moving imageview via animation http://stackoverflow.com/questions/11144421/move-an-imageview-to-different-position-in-animated-way-in-androidmay need to resize 45 barbell
"go to today's lift" button (on thirdScreen)
***"i don't have the following plates: then recalculate based on that
***prettier row layout
create an algorithm that allows you to choose pattern... It's totally possible but there's gonna be hella code revamping
display for weights less than 45
Maybe add swipe support to thirdScreen to go back? (but nothing on first and second screens) 
might want to programmatically change color of 45 to save space
empty barbell addition


TODO:
Prettier row layout - 
http://stackoverflow.com/questions/8447234/android-creating-two-columns-in-a-linearlayout
Can highlight each entry, toggle between two colors
Programmatically change gravity and layout weight, have a toggle function for what color you want to insert
Move config to options listener thing 
Can also make text a little bigger 


I don't have the following plates:
Add to config in individualView/thirdScreen
You will then have to have dynamic rounding depending on what plates they give oyou
allow users to specify what plates they have, just like you did with 35lb plate flag, you could do that for each and every plate and have an input screen that will set those booleans based on a bunch of check boxes
error handling as a result: 
** if you decide to have an okay and back button make sure your back button recognizes when something changes and they just hit back instead of okay and be like yo do you want to save these changes
** you can save these preferences in app data so user doesn't have to change them every time, however, you will want an option to change the shit in config somewhere  
hook up back end to plate addition UI 


training max bug when adjusting lifts and then going back, training maxes are wrong i think 

you may want these... you're welcome hope you got your fucking weblogic working
	private String[] getNextLiftDefault(Calendar c1, String[] myPattern, String currentLift, String incrementedString) {
		//String[] myPattern = {"Squat", "Rest", "Bench", "Deadlift", "Rest", "OHP"  };
		//each case: getnextliftfunctiondefault that finds the lift we are at case of, gets the column index,
		//increments (or decrements) that column indexes WHILE incrementing or decrementing the day until it runs into a day that isn't rest.
		//returns a 2 dimensioned array, with the first value being nextLift and the second value being incremented string
		String[] results = new String[2];
		int i = 0;
		//find our column index of our current lift...
		while (!myPattern[i].equals(currentLift))
			i++;
		//we need to increment at least once, but there may be more than one rest day we we have loop implemented..
		int j = i + 1;//set a new incrementer for i
		incrementedString = incrementDay(c1, 1);
		if (j >= myPattern.length) //may not need second declaration?
			j = 0;
		
		while (myPattern[j].equals("Rest"))
			{
			j++;
			incrementedString = incrementDay(c1, 1);
			if (j >= myPattern.length )
				j = 0; //go back to beginnig
			}
		//assert: if we broke out of this loop then myPattern[j] is NOT a rest day, and hence our next lift
		String nextLift = myPattern[j];
		
		results[0] = nextLift;
		results[1] = incrementedString;
		
		return results;
	}


	private String[] getPreviousLiftDefault(Calendar c1, String[] myPattern, String currentLift, String incrementedString) {
		//String[] myPattern = {"Squat", "Rest", "Bench", "Deadlift", "Rest", "OHP"  };
		//each case: getnextliftfunctiondefault that finds the lift we are at case of, gets the column index, increments (or decrements) that column indexes WHILE incrementing or decrementing the day until it runs into a day that isn't rest.
		//returns a 2 dimensioned array, with the first value being nextLift and the second value being incremented string
		String[] results = new String[2];
		int i = 0;
		//find our column index of our current lift...
		while (!myPattern[i].equals(currentLift))
			i++;
		//we need to increment at least once, but there may be more than one rest day we we have loop implemented..
		int j = i - 1;//set a new incrementer for i
		if (j < 0)//don't allow negatives 
			j = myPattern.length - 1; // put j back at the top
		incrementedString = decrementDay(c1, 1);
		if (j == 0 && myPattern[j].equals("Rest"))//rest part is for bounds protection, if it is not equal to rest we don't need to worry about it going into the next while loop, we already found our prevlift
			j = myPattern.length - 1; //start at the top
		
		while (myPattern[j].equals("Rest"))
			{
			j--;
			incrementedString = decrementDay(c1, 1);
			if (j == myPattern.length )
				j = myPattern.length - 1; //go back to top
			}
		//assert: if we broke out of this loop then myPattern[j] is NOT a rest day, and hence our next lift
		String prevLift = myPattern[j];
		
		results[0] = prevLift;
		results[1] = incrementedString;
		
		return results;
	}
