Who Was CNS 531 project progress
6-4: Got clear button working, ugly solution with onCreate but it will work for now 
6-5: Started to set up database, still need to figure out how to pass values from activity 1 to activity 3, unknown error, trace doesn't help. It's probably your terrible sql. Understand what each component does, I think you bit off more than you could chew in this (30 minute) print
6-7: Got dates to display in table. Next up is to get a fuckin formated date to insert.
6-8: Got formatted date to insert. Next is to pass the actual starting date. Which also got done today after a brief i broke something very important scare. Next up is to start adding other columns to table
6-10:Literally nothing depite working. To add columns you will have to make ugly alter table statemeents or find a way to delete the database
6-11:Morning:woke up with a drive to get something done before work. Mission accomplished! In order to get table to work properly, had to execute a drop table and then create table command.. To insert data and find proper column indices I used cursor.getString and cursor.getColumnIndex(string columnName). Data inserts fine now. 
6-11:Evening:INTENTS ARE NEEDED TO PASS DATA- a brutal brutal lesson learned. Dates are now being inserted in the correct format. Hopefully the algorithm work can start tomorrow. 
6-12: Created setStartingLifts function, and added rest of lift edittext fields. Function is tested and works. Error handling for bad (empty) data needs to be done (no bench over 1000, no squat over 1200, no ohp over 1000, no dead over 1200). Created incrementFreq/incrementLift methods. Did not test.
6-12: setter for starting dates does not work, just use intents. 
6-14: tried to fix layout problem (bench number not showing up in edittext), wrestled with it forever and settled with a right alignment with screen. not sure how this will pan out for smaller screens but we'll tackle the probem when it comes. Also did error handling today for the big 4, error stream outputs to dynamic textview. Again, hopefully this will work on smaller screens.
6-15: entries are now inserting with all proper information gathered from dateprocessor.java..minus the date itself. Algorithm could probably use some simplification too. All in good time 
6-15: Dates are finally incrementing correctly. Not even debugging can save you from silly function calls sometimes. Plenty of things to choose from for tomorrow...
6-16: Implemented scrolling when displaying data. Installed on a brand new vm, 3.4in, fits fine minus nonterminating decimals. Shouldn't be too bad to fix:) 
6-17: Fixed nonterminating decimals, now round to two decimal points. Fixed buttons in scrollview. Now move with scrolling :) Key was to put them outside the scrollview, but inside the relativelayout.  Added basics with a spinner and number of cycles to project, error handling and other cutesy stuff. Created temp (perhaps permanent) fix for thirdtoSecond... Made it simply go to first. WIll work for now. 
6-18: Started kg support. Cannot get intents to work properly to pass status of kg/lb, so just using toast. Didn't do error handling 
6-19: morning: Finally got mode flag to work.. Next up is to actually take care of the math. A "hide buttons" toggle would be nice for smaller screens
6-21: Have not got much done, have been busy setting my ubuntu environment. Figure it can't be bad to learn both. Should have Android system images installed tomorrow and should be able to finish up kg support without too much trouble.  
6-22: don't have all compatibility libraries working in ubuntu... regardless working on windows partition I added kg support (which seems to be working) and modified how the mode displays for a better viewing experience regardless of screen size. Added title that displayed what users starting lifts were. Next to do is cleanup... your old records are still there when you reinsert.
6-23: Still didn't do cleanup because that seemed boring and I did boring things at work all day:) Created rounding function, implemented for getFirstLift(), seems to work fine... Will add to other lifts. Tested on a 3.4 screen and it looks pretty slick. Next up is cleanup, a show buttons popup
6-24: Fixed back button logic.. Read console stack trace and fixed things.. Who woulda thunk. Fixed uncleared database bug.. Database should be clear every time now. As a result, removed clear button. Added options menu via a easy plug n play builder :) Surprised how well everything went today.. Next up is  probably option menu button logic  and cleanup of buttons on main layout that no longer need to be there. 
6-25: Added basic support (back buttons) to popup options menu on third screen, deleted old buttons. House cleaning on methods/formatting in attempt for cleaner presentation and hopefully a little faster database insertion algorithm:( Attempting to implement a onRestoreInstanceState method to remember lifts... Got that working pretty easily for the built in android back button. Struggled a bit with my 'adjust lifts' option (essentially a back button) before having the idea to simply call the same method my kindle uses. works great. wooooooo 
6-26: Working on view by views, which will be under an embedded builder after "View By..." button is pushed. Implemented everything  
6-27: Fixed views so they're actually displayed proper way. Recalling oncreate is never a good idea. Used query and only the methods called I needed from onCreate instead of the whole damn thing.. Tried to work on making layout prettier but had some issues with scalability. Function over form right now. Next up is viewing an existing creation.  
6-28: Started to work on view existing projection. training maxes are not currently saved but i am parsing for null and ignoring the ret string if it contains that word and replaces it with a newline. You'll probably want to figure that out.. 
7-01: Figured out how to save TMs for an existing projection... convoluted but works. 
7-02: Added zyzz bird background, training maxes now show when changing "view by...", added zyzz bird icon 
7-04: Created threaded loading screen :) 
7-06: Started to implement individual view UI. Got basic code down. Used lots of copy and paste...
7-07: Still work on individual view UI, made code a little prettier, however, you may want to read up on reflection for grabbing your fields. I'll add a todo.
7-08: started  to link UI with main application.. dynamically created individual text view for each entry, next is to add listeners and make sure I didn't break anything.  
7-09: Continuing to link.. Should be done tomorrow. Fixed odd bug with third lift displaying instead as training max. Mislabeled field in eventssqldatahelper.java 
7-10: Struggled hard with link.. No idea what was wrong with formatting. Workaround is to have bar + plate for each and every lift...
7-11: finished lb UI garbage, created a regex to split entries  
7-12: fixed platecomputer bug.. was comparing to integer string instead of double string -_- Eventually all these dumb errors will be sorted through quicker I hope 
7-14: UI is finally working properly on the individualview... It is a good day 
7-15: Finished up the set of three that will represent a single lift. Next up is to implement down and up swipe (where corner cases are the top and bottom entries in the database)
7-16: finsihed up dynamically created view on up and down swipe, took care of corner cases. Broke some stuff with views, will take care of that tomorrow :) 
7-17: Fixed bug with swiping up and then swiping right, navigation seems to be working proper now. Working on view by bug, will now scroll through no matter what view you're on. Bug now with training max, need to get it from database.
7-18: IndividualView now works for ANY view. Finally finished off training max bug and it was actually mildly elegant. I impress myself sometimes 
7-19: Fixed an overall view bug that saved previous mode when resetting and projecting a different set of lifts. Fixed frequency appender... forgot breaks in my switch statements :) Added proper lb/kg mode flag.. methoding is not working properly quite yet but i'll figure it out. I think it has to do with data being unpassed that's needed when you up and down swipe (ie the fucking mode itself) 
7-20: Fixed back button bug. Added kilogram error handling and slightly more dynamic error handling (actually retrieves erroraneous lift number). Got initial KG placeholders made... Started to tackle kilogram support  
7-21: added extra textviews for kilograms, hid them for lbs. Fixed SQL issue when starting fresh on new device 
7-22: Plugged in entirely new UI for third screen. Now uses dynamically created tablerows and looks oh so much better
7-23: Found a proper display for training maxes and config button
7-24: Finally plugged in logic that will support custom patterns of whatever user wants to do the lifts in. Still need to fix indidivual view scrolling. Currently have default scrolling implemented, but nothing else. Also need to rig up actual pattern chooser so I can really throw some test cases at my algorithms. (mostly my view ones, I'm pretty sure my calculate one is right.) 
7-28: Lost log entries somewhere in a commit. whoops. Continuing to refactor today.
7-28: set up hardware acceleration on linux machine, my life is a million times better now. Except for refactoring. In that sense I'd rather be on fire. Slowly but surely slimming classes down, not going to spend much more time on it.
7-29: slight refactoring and adding in plate booleans to specify what plates one does and doesn't have
7-30: environment issue, got boolean logic completely plugged in but can't deploy to test it... maybe it's back to dreaded windows tomorrow. Theme is fucked too 
7-31: Got a lot done today, took care of boolean error this morning. Took care of environment issue last night :)  eclipse still likes to crash a lot more on ubuntu than windows. Worth it. Took pattern choosing UI to another project just to iron out issues and make integration a lot less painful. Going well, got back end hooked up to pattern choosing, followed a nice tutorial. Next up is hook up error handling and parsing what the user chose. This will probably be "worst' part. Won't be able to work tomorrow, hopefully get it sorted out on Monday. To bring Monday me up to speed, take a look at the MainActivity comments in the patternchooser UI project. 
8-2 hooked merged UI activity into main activity with problems (what merge doesn't have those?) Got all of those sorted out. Dynamic day adding for easier error handling for me. Tomorrow is hooking up error handling in back/front end (returning bools/making toast. Then pass your pattern via intent after a couple debug runs and try to break your code. Don't forget the date in your intents.
8-3: Added richer error handling and improved some layout features.
9-21: Fixed number parsing locale issues, despite taking care of date locales beautifully, I seem to have forgot that some countries use commas instead of periods and parseDouble must not automatically take locale into consideration. Still need to add google analytics, try to support decimals and get this update out today. Added decimal support, just need analytics and then package up that apk and get this update out to keep with an update every 8 days. Update isn't happening. Do some reading on apk 
9-28/29: Still running into some locale errors, changed nf to simply getInstance() instead of getInstance(getDefault), changed errors to be more mature, gonna try to set up an event for analytics to send the string the user used if an exception is caught. Added hit senders on adjust pattern, send up a method to send an error IF the entered training max string passed through a locale-independent decimal regular expression. Will send the training max string in question. Can't seem to find root of noclassdef exception a couple people seem to be having, probably won't have a fix in for this update. Will keep an eye after this update to see if it keeps showing up and pursue it via analytics reporting.  
10-6-14: Changing individual view to be like iphone in a single screen
10-7-14: Something is screwed up in your imageview. Lift one done, lift two still needs done. Everything is more complicated in android
10-8-14: Got pound generation done, kilograms shouldn't be too bad but take your time and make sure you do it right. I don't think there's much to do beyond creating a switch statement and adding a conditional in your generateWeights statement that will generate a different barbell standard, use a different rounding protocol, and have a different array of weights. Finish this up tomorrow, shouldn't be too bad. Even for Android ;)
10-9-14: Finally got around to robusting the roundtotwodecimals crash that has been plauging the application. Figure out if you can fix the plate spaces if not whatever not a huge deal. Some UI stuff and then just let this cook out, fix bugs but forget these big overhauls. Make a stable and straightforward and decent looking app and that's all you really need.
10-14-14: Add arrows to new individualview page, get a "next" algorithm working (do you want up/down arrows or left/right arrows?.. Probably gonna go with up/down to keep old look and feel and for sake of room.)
10-15-14: Added back end to next/prev stuff, need to find pretty arrows for that and truly fucking fix this dumbass individual view stuff. Create separate layouts and see where that gets you. Beyond that UI and then drop this fucker for awhile
10-16-14: Finally fixed all barbell troubles with 3 separate layouts for each weight :) I think you're gonna want a twitter-like nav bar with the home page being dashboardy with personal bests, bodyweight, etc..
10-30-14: KG bug fixes, weird date bug, gonna get out of this project for awhile.
11-10-14: Made some improvements to adjustpattern, fixed bug with generating preview buffer (the first letter buffer thing you do on create new projection page) , also followed in iOS version's steps and allowed previous pattern to be viewed when adjust pattern is pressed making it feel MUCH more native. Created a method to derive lift pattern from database rather than making a schema change. (I am unsure how to cleanly do this and didn't want to cause a crisis. View existing projection is now supported on dashboard. I would double check over your pattern derivation algorithm because it's pretty ugly, so test that before hopping into anything else. After that add nav bar to all screens. (Beware of back button repercussions this may cause!!!)
  
11-11-14: wrestled with adding a nav drawer to first activity. Colors still need fixed and there is no back end

11-12-14: Wrestled with fragments, didn't even help, go back to activity brainstorming as to why you're getting that nullpointerexception metinks

11-17-14: After way too much wrestling with navdraweractivities I found an object oriented way to go about it and it's beautiful. You still need to implement it in the dashboard (I held back because I want to take some UI tips and anything else that I can steal from the fragment activity (has cutesy stuff for first time running app, etc.. and I also kinda dig the color scheme. Add in a back end for your already implemented navdraweractivities (since you'll only have to do it in one spot WOO) and then work on the navdrawerpretty. I think you'll want to keep the android robot icons it uses and replace them with cute little abstract images. Don't have redundancy with buttons on the dashboard like you were originally thinking, have a weight recorder and all that cutesey stuff first. But priority right now is to get navdrawer up and running. 

11-18-14: Fixed pattern adjust bug, wasn't passing an array and was causing some odd errors. Hooked up back end for some basic intent stuff. Create new projection is smart, if you have an existing database it will query it and grab the pattern from there :) Also played with UI, should definitely wait on colors however take a look at Pat's input so your app doesn't look like something made in VB.  
Take a look at Pat's input, he brought up a lot of good points


11-19-14: Fixed dialog cancel bug. I `think` I fixed the getPatternFromDB method, but I'm gonna have to keep an eye on it

11-20-14: Combined pattern + training max for a MUCH better looking page, smart fields based on drag and drop and day spinner

11-21-14: Some back end work on fields knowing what lift they should be associated with (bench, squat, ohp, dead, nothing (for numeric and rest)),
added placeholder for about page

11-22-14: 
     :::Commit 1
	Added settings activity placeholder
	Added settings to navdrawer
	Removed ugliness from action bar
	Removed old/unused activity xmls/javas
	Removed dash fragment from manifest and added in actual dashboard activity

     :::Commit 2
	Hooked up new hybrid pattern/TM activity
	Added custom button to replace reset button
	Fixed training max screen
	Made TM stream retrieval much prettier

    :::Commit 3
	Changed starting date text
	Schema change for pattern
	bench dead rest rest squat overhead rest
	Bug fixes
11-23-14:
    :::Commit 1:
    Removed view existing projection bugs.. might have left from crud from failed attempt though. 
    :::Commit 2
     Adding segmented button instead of spinner
   
    ::Commit 3
    I don't really remember. Working fixing segmented button. 
11-24-14:
  :::Commit 1:
  After a good night's sleep got segmented button working properly, fixed a bug with training max stream. Set default selection on both segmented buttons. Just need to adjust logic to move pattern size and rounding flag to third screen in configure menu instead of second screen. Will look into intent dependencies. 

Also, some second page considerations:
	1) When you press custom you may not want to create a refreshed intent, this, for one, refreshes ALL components of the page (meaning user will lose pattern size, unit mode, and rounding flag if they are not set to the default when the activity refreshes. Instead of playing intent volleyball, look into just adjusting what needs adjusted. (The fields and training maxes) Furthermore, with this intent volleyball you will also have to override onBackPressed, otherwise when user presses his (Android) back button it will take him to the actiity before freshing.  Granted, you will need to find a way to refresh the UI but I'm not sure if creating a new intent to the same idea is it.

   :::commit 2: (techinically this morning but work was done yesterday. Fixed pattern refresh to no longer depend on an intent as stated above so back button didn't need overridden and overall a much cleaner solution. Also added an ugly (complete with wrong direction animation placeholder) swipe nav to first page.

11-25-14:
    Working on a fix to make rounding mode available at runtime. Ran into a snag where Processor is null when I'm using that to get the rouning mode, and I'm not sure what other problems I'd run into inside the conditional (I was using lbMode field which may be null but would be possible to get from database.) I should have pushed in my other commit but I did manually undid those changes and put that commit in and the current change I'm talking about right now is available in holdme directory in root of repo 

11-26-14:
	Added toggle rounding button on third screen, still need to remove from second and do some more testing. 

Just seemed to test, seems to work proper, just need to get title to show back up. You might want to commit your current toggle rounding work 


12-1-14:
	Made error handling on the textview instead of having toast (after palmey exposed the fact that it was thrown every time the button was pressed.
Just need to fix the other toast problem with lacking a lift, as it will also be thrown every time save is pressed. It's the little things but users are not supposed to be smart. 

12-2-14: Got placeholder for viewpager, intent for activity is at the bottom of your nav drawer.  may have to convert to fragments. see
 http://stackoverflow.com/questions/9849138/android-pagerview-between-activities

12-3-14: Had to immediately throw ThirdScreenPrototype into limelight, however, I think she's working great. Cycles get separated very nicely, you just need to think of a clean way to display cycle 1. (You can't use onTabSelected because it is called before the database is populated. You may be able to create a field and assign the cycle value in onTab and then use the cycle value in all the queries in your view switch statement (which really needs refactored while you're at it ;) ). I think this will be the right way to go, then it will be uniform cycle handling as opposed to hacking something for the first cycle. It shouldn't be a big deal, but make sure you use your call hierarchy to intercept each and every call to setQuery. This will mean you will have no more null queries (everything will have at least the cycle), and all of your other not null queries will have at least one and clause to accomodate what cycle you are trying to display. No commits until you get a little more testing in. Make your rows bigger.

Also added support for cycle 1 in view selection. Sort through the first entry bug and get your mock individualviews set up so you can move to a collection

12-4-14: Fixed date bug, was trivial wrong method call in your swipe. (Swipe and button press both call different methods) Working on implementing the collectionview, it looks like it may have to extend FragmentActivity (which will remove the ability to have the navdrawer) but it has a single backs stack (meaning you only have to press back once regardless of how many items you've swiped through) so I think it's the right road to head down. You're using a single activity so the fragment stuff should't be too much of a worry. TLDR:  change your IndividualViewsPrototype to mock CollectionDemoActivty.java in EffectiveNavigation (MainActivity project), remove nav drawer stuff in the activity xml, the java file AND the manifest.

Got viewpager set up for individualView prototype, first time actually working with fragments

12-5-14: Working through viewpager, weights are now generating for initialization and I think you can plug and play your current intent groundwork to pass data between swipes, the only thing you need to do is find an efficient way to detect a swipe and in what direction it is going, kinda hit a dead end with onPageChangeListener, probably worth taking another look at with a fresh brain. Take a look at currently implemented fragment methods as well.

12-6-14: After having no clue of how fragments work I think I have swiping working properly. Big realization was two fragments get created at once because you are swiping. Need to break out ugly bundle methods into a fragmentConfigTool and then implement prev lift stuff in that class. I don't know how it's gonna go down but hopefully the args will just mesh and be assigned properly, if not you should be able to solve conflicts with an enum or state variable of some type.


12-6-14: If you get stuck with next/prev just commenting prev out in your direction detector fixes a decent amount :) view is loading what comes will come next, not what you are swiping to. that is already generated. 


12-8-14: Back to drawing board.. try using a fragmentpageradapter instead of this state bullshit. 
Went back to drawing board, used a regular fragment adapter and just populated the list and it works perfectly with my mock setup. Need to change titles (currently doesn't display date) and then I'll try to integrate this page into actual page layout and get a commit together. Fixed view existing projection bug on viewing. Lots and lots of cleanup and adding tracker sends. Lint stuff still needs fixed too.


12-9-14: Switching over to AS as the Android for Eclipse will no longer be maintained with AS 1.0 coming out. Was
 mild nightmare, sorted a lot out, actually able to build now, just need to sort out issue with AVD. I think it h
as to do with installing as root (that's where your avd definitions go - /root/.android/avd instead of base user.
 So see how the hell to fix that. First see if you can reconfigure your .android directory otherwise you may have
 to run through another install (Which won't be a big deal because you can build and that's where a bulk of your
time went - just reimport the workspace/531Calc project. Gradle and everything is already good to go. 

12-10-14: avd is up and running, got a lot of my eclipse shortcuts into intellij, transition wasn't so bad:) Still running into that odd hidden day error field bug, not very easily reproducable, keep eyes open.. Got pat's suggestion to show pattern size when custom is pressed in, it's ugly but UI will come when you can actually work with patrick.

12-11-14: Got errors behaving as they should be on textviews, added focusable attributes to xml and a click listener that will show the error message if they erraneous textview is clicked. Need to do something slicker when playing with currentView enum because it has the possiblity to query two different columns (and most likely none at all for default, unless you can slip in a wildcard). Shouldn't be bad just don't want to rush it

12-12-14: Fixed view by across different tabs. Grabbed an old facebook dashbaord presentation to base my dashboard off of. Removed all button pressed state stuff, however, can always add it back in (just uncomment the state stuff in the dashboard button.xml). Also cleaned out some additional layout files, gotta admit AAS has some nicer featues

12-13-14: Fixed queueing toast by using a toast wrapper called Boast that will only allow one Toast to queue at a time (during its span of being shown). 

12-15-14: Moving out, not much progress lately. Got a good backlog of stuff and some brainstorming done in the car today, we'll see what I can get done tonight. 

12-16-14: Working on shift date functionality. Got builder and an enum state together that plays nicely with the current table row click listener. Need to find some sort of way to display what mode you're currently in but will push that off until I can talk to Pat about UI. Will be working through update logic tomorrow morning. 

12-17-14: Got logic framework laid out, really wanted to try to do it in SQL but both a stackoverflow question and research didn't seem to yield much, so doing it in Java. Running into something funky with incrementing, getting a lot of colliding dates, going to take a break and attack it after gymming. Found problem. '12-12-14' evaluates as greater than '01-01-15'. I guess an option is a schema change to have a non display date column that will have the proper format, look in the overflow answer and see if you can work something out tomorrow

12-18-14: Got shift forward/backward working without a schema change, just some substring gymnastics
12-20-14: Switched first, second and third screen activities to fragments, being held by a tabbed activity now, tabs for third screen are now gone, hopefully can find iHeart scrolling

12-23-14: View existing is now supported with changeover to fragment

12-24-14: Some weirdness with reprojecting, still needs fixed. Looks like db isn't being cleared properly.

12-25-14: Fixed projection issues. Wasn't a matter of database, it was a matter of the fragment preserving old data in its tableview. Merry Christmas :) Seems like other people are running into the "Attempting to invole virtual method getParent on null object reference... Seems to be a result of sticky headers. Dropping and recreating the fragment may be the way to go as I don't really want to wait for a workaround. Everything is suddenly fixed and I don't really know why but I'm really not complaining :) Most of configure buttons are now working. Running into some trouble with the builder I wanted to implement on the second screen, seems to be showing up twice, make sure the solution actually works as well, this is probably a useful feature to have...
